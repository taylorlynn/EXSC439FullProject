/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.blog.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.blog.blog.BlogPackage;
import org.xtext.example.blog.blog.Category;
import org.xtext.example.blog.blog.Image;
import org.xtext.example.blog.blog.ImageContent;
import org.xtext.example.blog.blog.Model;
import org.xtext.example.blog.blog.Page;
import org.xtext.example.blog.blog.ParagraphContent;
import org.xtext.example.blog.blog.Section;
import org.xtext.example.blog.blog.Site;
import org.xtext.example.blog.services.BlogGrammarAccess;

@SuppressWarnings("all")
public class BlogSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BlogGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BlogPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BlogPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case BlogPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case BlogPackage.IMAGE_CONTENT:
				sequence_ImageContent(context, (ImageContent) semanticObject); 
				return; 
			case BlogPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BlogPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case BlogPackage.PARAGRAPH_CONTENT:
				sequence_ParagraphContent(context, (ParagraphContent) semanticObject); 
				return; 
			case BlogPackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			case BlogPackage.SITE:
				sequence_Site(context, (Site) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Category returns Category
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Category(ISerializationContext context, Category semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPackage.Literals.CATEGORY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPackage.Literals.CATEGORY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SectionContent returns ImageContent
	 *     ImageContent returns ImageContent
	 *
	 * Constraint:
	 *     image=[Image|ID]
	 */
	protected void sequence_ImageContent(ISerializationContext context, ImageContent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPackage.Literals.IMAGE_CONTENT__IMAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPackage.Literals.IMAGE_CONTENT__IMAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImageContentAccess().getImageImageIDTerminalRuleCall_2_0_1(), semanticObject.eGet(BlogPackage.Literals.IMAGE_CONTENT__IMAGE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (name=ID url=STRING)
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPackage.Literals.IMAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPackage.Literals.IMAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, BlogPackage.Literals.IMAGE__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPackage.Literals.IMAGE__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImageAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getImageAccess().getUrlSTRINGTerminalRuleCall_2_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (images+=Image* categories+=Category* site=Site)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (name=STRING description=STRING (categories+=[Category|ID] categories+=[Category|ID]*)? sections+=Section*)
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SectionContent returns ParagraphContent
	 *     ParagraphContent returns ParagraphContent
	 *
	 * Constraint:
	 *     content=STRING
	 */
	protected void sequence_ParagraphContent(ISerializationContext context, ParagraphContent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BlogPackage.Literals.PARAGRAPH_CONTENT__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BlogPackage.Literals.PARAGRAPH_CONTENT__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParagraphContentAccess().getContentSTRINGTerminalRuleCall_2_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (name=STRING content+=SectionContent*)
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Site returns Site
	 *
	 * Constraint:
	 *     (name=STRING description=STRING hasNavbar?='has_navbar'? iconUrl=STRING? pages+=Page*)
	 */
	protected void sequence_Site(ISerializationContext context, Site semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
